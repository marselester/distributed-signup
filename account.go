package account

import (
	"context"
)

// SignupRequest is a user's intention to sign up.
// It is not necessarily a signup request will be granted. For instance, if a username is already claimed,
// a duplicate user won't be created.
type SignupRequest struct {
	// ID is a request ID generated by a user to help with requests deduplications.
	ID string `json:"request_id"`
	// Username is a name user chose on sign up.
	Username string `json:"username"`
	// Partition is a number of a partition where the signup request was stored.
	Partition int32 `json:"-"`
	// SequenceID is ID assigned internally. For example, in Kafka it is an offset of the message.
	SequenceID int64 `json:"-"`
}

// SignupResponse represents a server answer to a SignupRequest.
type SignupResponse struct {
	// RequestID is a request ID generated by a user to help with requests deduplication.
	RequestID string `json:"request_id"`
	// Username is a name user chose on sign up.
	Username string `json:"username"`
	// Success indicates whether a signup request was successful.
	Success bool `json:"success"`
	// Partition is a number of a partition where the signup response was stored.
	Partition int32 `json:"-"`
	// SequenceID is ID assigned internally. For example, in Kafka it is an offset of the message.
	SequenceID int64 `json:"-"`
}

// User represents a signed up user.
type User struct {
	// ID of a user assigned internally by a service, e.g., UUID.
	ID       string
	Username string
}

// UserService represents a service to store user accounts.
type UserService interface {
	CreateUser(ctx context.Context, u *User) error
	ByUsername(ctx context.Context, username string) (*User, error)
}

// SignupService represents a service where a user can sign up by creating a request.
// The result is provided by Responses.
type SignupService interface {
	CreateRequest(ctx context.Context, req *SignupRequest) error
	// Requests calls f to process signup requests as they arrive.
	Requests(ctx context.Context, f func(req *SignupRequest)) error
	CreateResponse(ctx context.Context, resp *SignupResponse) error
	// Responses calls f to process signup responses as they arrive.
	Responses(ctx context.Context, f func(req *SignupResponse)) error
}
